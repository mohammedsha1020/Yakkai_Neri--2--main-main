from flask import Flask, request, render_template, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
import pymysql

app = Flask(__name__)

# --- Database Configuration ---
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:@localhost:3306/yakkai_neri'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ECHO'] = True

db = SQLAlchemy(app)

# Verify database connection
try:
    with app.app_context():
        db.engine.connect()
        print('Database connection successful!')
except Exception as e:
    print('Database connection error:', str(e))

db = SQLAlchemy(app)

# Create the database if it doesn't exist
def init_db():
    try:
        # Create database if it doesn't exist
        engine = db.create_engine('mysql+pymysql://root:@localhost:3306/')
        conn = engine.connect()
        conn.execute('CREATE DATABASE IF NOT EXISTS yakkai_neri')
        conn.close()
        print('Database yakkai_neri created or already exists')
        
        # Now create tables
        with app.app_context():
            db.create_all()
            print('Tables created successfully!')
            
            # Verify tables exist
            inspector = db.inspect(db.engine)
            tables = inspector.get_table_names()
            print('Current tables in database:', tables)
            
            if 'wellness_assessments' in tables:
                print('wellness_assessments table structure:')
                for column in inspector.get_columns('wellness_assessments'):
                    print(f"- {column['name']}: {column['type']}")
    except Exception as e:
        print('Database initialization error:')
        print(f'Error type: {type(e).__name__}')
        print(f'Error message: {str(e)}')
        raise e

# Initialize database
init_db()

# Define table structure for wellness submissions
class WellnessSubmission(db.Model):
    __tablename__ = 'wellness_assessments'
    id = db.Column(db.Integer, primary_key=True)
    company_code = db.Column(db.String(50))
    q1 = db.Column(db.String(10))
    q2 = db.Column(db.String(10))
    q3 = db.Column(db.String(10))
    q4 = db.Column(db.String(10))
    q5 = db.Column(db.String(10))
    q6 = db.Column(db.String(10))
    q7 = db.Column(db.String(10))
    q8 = db.Column(db.String(10))
    q9 = db.Column(db.String(10))
    q10 = db.Column(db.String(10))
    q11 = db.Column(db.String(10))
    q12 = db.Column(db.String(10))
    name = db.Column(db.String(100))
    mobile = db.Column(db.String(20))
    email = db.Column(db.String(120))
    designation = db.Column(db.String(100))
    total_score = db.Column(db.Integer)
    submission_date = db.Column(db.TIMESTAMP, default=db.func.current_timestamp())


# Define table structure for companies
class Company(db.Model):
    __tablename__ = 'companies'
    id = db.Column(db.Integer, primary_key=True)
    company_name = db.Column(db.String(100), nullable=False)
    contact_person = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    phone = db.Column(db.String(20), nullable=False)
    employee_count = db.Column(db.Integer)
    industry = db.Column(db.String(100))
    company_code = db.Column(db.String(50), unique=True, nullable=False)
    created_date = db.Column(db.TIMESTAMP, default=db.func.current_timestamp())

# Create database tables
with app.app_context():
    db.create_all()

# Route to render the main corporate yoga page
@app.route("/")
def home():
    return render_template("corporate-yoga.html", company_code="ABC123")

# Route to serve the wellness form for individuals
@app.route("/wellness_form")
def wellness_form():
    return render_template("individual-wellness.html")

# Route to serve the corporate onboarding form for HR/Team Leads
@app.route("/corporate_onboard")
def corporate_onboard():
    return render_template("hr-register.html")

# Route to handle form submission for the wellness assessment
@app.route("/submit_wellness/<company_code>", methods=["POST"])
def submit_wellness(company_code):
    try:
        print(f"Form submission received for company_code: {company_code}")
        form_data = dict(request.form)
        print(f"Form data: {form_data}")
        
        # Calculate total score from q1 to q12
        total_score = 0
        for i in range(1, 13):
            score = request.form.get(f'q{i}')
            if score and score.isdigit():
                total_score += int(score)
        
        data = WellnessSubmission(
            company_code=company_code,
            q1=request.form.get("q1"),
            q2=request.form.get("q2"),
            q3=request.form.get("q3"),
            q4=request.form.get("q4"),
            q5=request.form.get("q5"),
            q6=request.form.get("q6"),
            q7=request.form.get("q7"),
            q8=request.form.get("q8"),
            q9=request.form.get("q9"),
            q10=request.form.get("q10"),
            q11=request.form.get("q11"),
            q12=request.form.get("q12"),
            name=request.form.get("name"),
            mobile=request.form.get("mobile"),
            email=request.form.get("email"),
            designation=request.form.get("designation"),
            total_score=total_score
        )
        
        print("Attempting to save data to database...")
        db.session.add(data)
        db.session.commit()
        print(f"Data saved successfully! ID: {data.id}, Total score: {total_score}")
        return render_template('submission-success.html')
    
    except Exception as e:
        print("ERROR saving data to database:")
        print(f"Error type: {type(e).__name__}")
        print(f"Error message: {str(e)}")
        print("Form data:", form_data)
        db.session.rollback()
        return f"Error submitting form: {str(e)}", 500
        return redirect(url_for('submission_success'))
    except Exception as e:
        print(f"Error submitting form: {e}")
        db.session.rollback()
        return f"An error occurred: {e}", 500

# Route for a successful submission message
@app.route("/submission_success")
def submission_success():
    return render_template("submission-success.html")

# Route to handle form submission for company registration
@app.route("/submit_company", methods=["POST"])
def submit_company():
    try:
        new_company = Company(
            company_name=request.form.get("company_name"),
            contact_person=request.form.get("contact_person"),
            email=request.form.get("email"),
            phone=request.form.get("phone"),
            employee_count=request.form.get("employee_count"),
            industry=request.form.get("industry"),
            company_code=request.form.get("company_code")
        )
        db.session.add(new_company)
        db.session.commit()
        return redirect(url_for('submission_success'))
    except Exception as e:
        db.session.rollback()
        return f"An error occurred: {e}", 500

if __name__ == "__main__":
    app.run(debug=True)